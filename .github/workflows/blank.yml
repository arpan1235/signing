name: Code Signing Workflow

on: 
  push: 
    branches: [ main ]  # Trigger on push to main branch

jobs:
  sign-exe:
    runs-on: windows-latest  # Ensure it's a Windows runner for EXE signing

    steps:
      # Checkout the repository to make sure we have access to the files
      - name: Checkout repository
        uses: actions/checkout@v4

      # Debug step to confirm the file exists
      - name: Check if .exe file exists
        run: |
          if (Test-Path "${{ github.workspace }}/ArchitectCopilot.exe") {
            Write-Host "File exists!"
          } else {
            Write-Host "File does not exist!"
            exit 1  # Fail the job if file doesn't exist
          }
        shell: pwsh

      # Debug step to list the files in the directory to confirm we're targeting the right files
      - name: List files in the repo
        run: |
          Get-ChildItem "${{ github.workspace }}" -Recurse
        shell: pwsh

      # Debug step to ensure we are targeting the correct .exe files
      - name: List .exe files to be signed
        run: |
          Get-ChildItem "${{ github.workspace }}" -Filter "*.exe" -Recurse
        shell: pwsh

      # Code Signing Step
      - name: Azure Trusted Signing
        uses: Azure/trusted-signing-action@v0.5.1
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_ENDPOINT }}
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}
          
          # Point to the root directory of the repo
          files-folder: "${{ github.workspace }}"
          files-folder-filter: "exe"

      # Debug step to confirm signing happened
      - name: Check if file is signed
        run: |
          signtool verify /pa "${{ github.workspace }}/ArchitectCopilot.exe"
        shell: pwsh
